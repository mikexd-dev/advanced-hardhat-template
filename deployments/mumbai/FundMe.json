{
  "address": "0x69d6edd7c6b4E95a3a1B896A7a0F9da51e6dD9Be",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeed",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fundingAddress",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVersion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x5bbf426cafe8c25a2fa17a5a0a84b389fce47d13886c0cd602df5072b212e14d",
  "receipt": {
    "to": null,
    "from": "0x87eA8ddFdfB00E07ED8872173e975530D135C9FC",
    "contractAddress": "0x69d6edd7c6b4E95a3a1B896A7a0F9da51e6dD9Be",
    "transactionIndex": 13,
    "gasUsed": "1069418",
    "logsBloom": "0x
    "blockHash": "0x362d210b6081b2c237ae544347f3e5933564ecc907e246b02db87e8097ccbe21",
    "transactionHash": "0x5bbf426cafe8c25a2fa17a5a0a84b389fce47d13886c0cd602df5072b212e14d",
    "logs": [
      {
        "transactionIndex": 13,
        "blockNumber": 28836334,
        "transactionHash": "0x5bbf426cafe8c25a2fa17a5a0a84b389fce47d13886c0cd602df5072b212e14d",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000087ea8ddfdfb00e07ed8872173e975530d135c9fc",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000005b2f1ea398e6800000000000000000000000000000000000000000000000045cc1cf0327280120000000000000000000000000000000000000000000026f2c5ad176a637da1e100000000000000000000000000000000000000000000000045c669fe4838f1aa0000000000000000000000000000000000000000000026f2c5b2ca5c4db73049",
        "logIndex": 78,
        "blockHash": "0x362d210b6081b2c237ae544347f3e5933564ecc907e246b02db87e8097ccbe21"
      }
    ],
    "blockNumber": 28836334,
    "cumulativeGasUsed": "3599356",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0715A7794a1dc8e42615F059dD6e406A6594651A"
  ],
  "numDeployments": 3,
  "solcInputHash": "c15c8c528c1b806a98e3c673eed62a46",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeed\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundingAddress\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Patrick Collins\",\"details\":\"This implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{\"getAddressToAmountFunded(address)\":{\"params\":{\"fundingAddress\":\"the address of the funder\"},\"returns\":{\"_0\":\"the amount funded\"}}},\"title\":\"A sample Funding Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"This function is for funding the contract based on the ETH/USD price\"},\"getAddressToAmountFunded(address)\":{\"notice\":\"Gets the amount that an address has funded\"}},\"notice\":\"This contract is for creating a sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// 1. Pragma\\npragma solidity ^0.8.7;\\n// 2. Imports\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n\\n// 3. Interfaces, Libraries, Contracts\\nerror FundMe__NotOwner();\\n\\n/**@title A sample Funding Contract\\n * @author Patrick Collins\\n * @notice This contract is for creating a sample funding contract\\n * @dev This implements price feeds as our library\\n */\\ncontract FundMe {\\n  // 4. Type Declarations\\n  using PriceConverter for uint256;\\n\\n  // 5. State variables\\n  uint256 public constant MINIMUM_USD = 50 * 10**18;\\n  address private immutable i_owner;\\n  address[] private s_funders;\\n  mapping(address => uint256) private s_addressToAmountFunded; // s_ for storage variables == high gas fee\\n  AggregatorV3Interface private s_priceFeed;\\n\\n  // 6. Events (we have none!)\\n\\n  // 7. Modifiers\\n  modifier onlyOwner() {\\n    // require(msg.sender == i_owner);\\n    if (msg.sender != i_owner) revert FundMe__NotOwner();\\n    _;\\n  }\\n\\n  // 8. Functions Order:\\n  //// constructor\\n  //// receive\\n  //// fallback\\n  //// external\\n  //// public\\n  //// internal\\n  //// private\\n  //// view / pure\\n\\n  constructor(address priceFeed) {\\n    s_priceFeed = AggregatorV3Interface(priceFeed);\\n    i_owner = msg.sender;\\n  }\\n\\n  receive() external payable {\\n    fund();\\n  }\\n\\n  fallback() external payable {\\n    fund();\\n  }\\n\\n  /**\\n   * @notice This function is for funding the contract based on the ETH/USD price\\n   */\\n  function fund() public payable {\\n    require(\\n      msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\\n      \\\"You need to spend more ETH!\\\"\\n    );\\n    // require(PriceConverter.getConversionRate(msg.value) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n    s_addressToAmountFunded[msg.sender] += msg.value;\\n    s_funders.push(msg.sender);\\n  }\\n\\n  function withdraw() public onlyOwner {\\n    for (\\n      uint256 funderIndex = 0;\\n      funderIndex < s_funders.length;\\n      funderIndex++\\n    ) {\\n      address funder = s_funders[funderIndex];\\n      s_addressToAmountFunded[funder] = 0;\\n    }\\n    s_funders = new address[](0);\\n    // Transfer vs call vs Send\\n    // payable(msg.sender).transfer(address(this).balance);\\n    (bool success, ) = i_owner.call{ value: address(this).balance }(\\\"\\\");\\n    require(success);\\n  }\\n\\n  function cheaperWithdraw() public onlyOwner {\\n    address[] memory funders = s_funders;\\n    // mappings can't be in memory, sorry!\\n    for (uint256 funderIndex = 0; funderIndex < funders.length; funderIndex++) {\\n      address funder = funders[funderIndex];\\n      s_addressToAmountFunded[funder] = 0;\\n    }\\n    s_funders = new address[](0);\\n    // payable(msg.sender).transfer(address(this).balance);\\n    (bool success, ) = i_owner.call{ value: address(this).balance }(\\\"\\\");\\n    require(success);\\n  }\\n\\n  /** @notice Gets the amount that an address has funded\\n   *  @param fundingAddress the address of the funder\\n   *  @return the amount funded\\n   */\\n  function getAddressToAmountFunded(address fundingAddress)\\n    public\\n    view\\n    returns (uint256)\\n  {\\n    return s_addressToAmountFunded[fundingAddress];\\n  }\\n\\n  function getVersion() public view returns (uint256) {\\n    return s_priceFeed.version();\\n  }\\n\\n  function getFunder(uint256 index) public view returns (address) {\\n    return s_funders[index];\\n  }\\n\\n  function getOwner() public view returns (address) {\\n    return i_owner;\\n  }\\n\\n  function getPriceFeed() public view returns (AggregatorV3Interface) {\\n    return s_priceFeed;\\n  }\\n}\\n\",\"keccak256\":\"0x86cfba55d2e2e587599585e8bc1cf13aa69881998a775c6d260be2a4fffe226a\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConverter {\\n  function getPrice(AggregatorV3Interface priceFeed)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    (, int256 answer, , , ) = priceFeed.latestRoundData();\\n    // ETH/USD rate in 18 digit\\n    return uint256(answer * 10000000000);\\n  }\\n\\n  // 1000000000\\n  // call it get fiatConversionRate, since it assumes something about decimals\\n  // It wouldn't work for every aggregator\\n  function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    uint256 ethPrice = getPrice(priceFeed);\\n    uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\n    // the actual ETH/USD conversation rate, after adjusting the extra 0s.\\n    return ethAmountInUsd;\\n  }\\n}\\n\",\"keccak256\":\"0x85e1796e8ea7d1ae7df679124784e93ec9bada2bb235a8a1be214bff6462629c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200138638038062001386833981810160405281019062000037919062000120565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b815250505062000152565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e882620000bb565b9050919050565b620000fa81620000db565b81146200010657600080fd5b50565b6000815190506200011a81620000ef565b92915050565b600060208284031215620001395762000138620000b6565b5b6000620001498482850162000109565b91505092915050565b60805160601c6111f96200018d6000396000818161042e015281816105c101528181610667015281816106b701526108ad01526111f96000f3fe60806040526004361061008a5760003560e01c8063893d20e811610059578063893d20e81461014d5780639e87a5cd14610178578063b60d4288146101a3578063be2693f0146101ad578063d7b4750c146101c457610099565b80630343fb25146100a35780630d8e6e2c146100e05780633ccfd60b1461010b5780636b69a5921461012257610099565b3661009957610097610201565b005b6100a1610201565b005b3480156100af57600080fd5b506100ca60048036038101906100c59190610b70565b61033c565b6040516100d79190610bb6565b60405180910390f35b3480156100ec57600080fd5b506100f5610385565b6040516101029190610bb6565b60405180910390f35b34801561011757600080fd5b5061012061042c565b005b34801561012e57600080fd5b50610137610656565b6040516101449190610bb6565b60405180910390f35b34801561015957600080fd5b50610162610663565b60405161016f9190610be0565b60405180910390f35b34801561018457600080fd5b5061018d61068b565b60405161019a9190610c5a565b60405180910390f35b6101ab610201565b005b3480156101b957600080fd5b506101c26106b5565b005b3480156101d057600080fd5b506101eb60048036038101906101e69190610ca1565b610943565b6040516101f89190610be0565b60405180910390f35b6802b5e3af16b1880000610240600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461098a90919063ffffffff16565b1015610281576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161027890610d2b565b60405180910390fd5b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102d09190610d7a565b925050819055506000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b1580156103ef57600080fd5b505afa158015610403573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104279190610de5565b905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104b1576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60008054905081101561055c5760008082815481106104d6576104d5610e12565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061055490610e41565b9150506104b4565b50600067ffffffffffffffff81111561057857610577610e8a565b5b6040519080825280602002602001820160405280156105a65781602001602082028036833780820191505090505b50600090805190602001906105bc929190610a66565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161060390610eea565b60006040518083038185875af1925050503d8060008114610640576040519150601f19603f3d011682016040523d82523d6000602084013e610645565b606091505b505090508061065357600080fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461073a576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808054806020026020016040519081016040528092919081815260200182805480156107bd57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610773575b5050505050905060005b81518110156108485760008282815181106107e5576107e4610e12565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061084090610e41565b9150506107c7565b50600067ffffffffffffffff81111561086457610863610e8a565b5b6040519080825280602002602001820160405280156108925781602001602082028036833780820191505090505b50600090805190602001906108a8929190610a66565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516108ef90610eea565b60006040518083038185875af1925050503d806000811461092c576040519150601f19603f3d011682016040523d82523d6000602084013e610931565b606091505b505090508061093f57600080fd5b5050565b600080828154811061095857610957610e12565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600080610996836109c6565b90506000670de0b6b3a764000085836109af9190610eff565b6109b99190610f88565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610a0f57600080fd5b505afa158015610a23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a479190611031565b5050509150506402540be40081610a5e91906110ac565b915050919050565b828054828255906000526020600020908101928215610adf579160200282015b82811115610ade5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610a86565b5b509050610aec9190610af0565b5090565b5b80821115610b09576000816000905550600101610af1565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b3d82610b12565b9050919050565b610b4d81610b32565b8114610b5857600080fd5b50565b600081359050610b6a81610b44565b92915050565b600060208284031215610b8657610b85610b0d565b5b6000610b9484828501610b5b565b91505092915050565b6000819050919050565b610bb081610b9d565b82525050565b6000602082019050610bcb6000830184610ba7565b92915050565b610bda81610b32565b82525050565b6000602082019050610bf56000830184610bd1565b92915050565b6000819050919050565b6000610c20610c1b610c1684610b12565b610bfb565b610b12565b9050919050565b6000610c3282610c05565b9050919050565b6000610c4482610c27565b9050919050565b610c5481610c39565b82525050565b6000602082019050610c6f6000830184610c4b565b92915050565b610c7e81610b9d565b8114610c8957600080fd5b50565b600081359050610c9b81610c75565b92915050565b600060208284031215610cb757610cb6610b0d565b5b6000610cc584828501610c8c565b91505092915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610d15601b83610cce565b9150610d2082610cdf565b602082019050919050565b60006020820190508181036000830152610d4481610d08565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d8582610b9d565b9150610d9083610b9d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610dc557610dc4610d4b565b5b828201905092915050565b600081519050610ddf81610c75565b92915050565b600060208284031215610dfb57610dfa610b0d565b5b6000610e0984828501610dd0565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610e4c82610b9d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610e7f57610e7e610d4b565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610ed4600083610eb9565b9150610edf82610ec4565b600082019050919050565b6000610ef582610ec7565b9150819050919050565b6000610f0a82610b9d565b9150610f1583610b9d565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610f4e57610f4d610d4b565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610f9382610b9d565b9150610f9e83610b9d565b925082610fae57610fad610f59565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610fd881610fb9565b8114610fe357600080fd5b50565b600081519050610ff581610fcf565b92915050565b6000819050919050565b61100e81610ffb565b811461101957600080fd5b50565b60008151905061102b81611005565b92915050565b600080600080600060a0868803121561104d5761104c610b0d565b5b600061105b88828901610fe6565b955050602061106c8882890161101c565b945050604061107d88828901610dd0565b935050606061108e88828901610dd0565b925050608061109f88828901610fe6565b9150509295509295909350565b60006110b782610ffb565b91506110c283610ffb565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561110157611100610d4b565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561113e5761113d610d4b565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561117b5761117a610d4b565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156111b8576111b7610d4b565b5b82820290509291505056fea2646970667358221220d9e660d995a744b70effad1cbed4c1b11a8bc3f41d6b54e7a6b92ad5fc6200ba64736f6c63430008080033",
  "deployedBytecode": "0x60806040526004361061008a5760003560e01c8063893d20e811610059578063893d20e81461014d5780639e87a5cd14610178578063b60d4288146101a3578063be2693f0146101ad578063d7b4750c146101c457610099565b80630343fb25146100a35780630d8e6e2c146100e05780633ccfd60b1461010b5780636b69a5921461012257610099565b3661009957610097610201565b005b6100a1610201565b005b3480156100af57600080fd5b506100ca60048036038101906100c59190610b70565b61033c565b6040516100d79190610bb6565b60405180910390f35b3480156100ec57600080fd5b506100f5610385565b6040516101029190610bb6565b60405180910390f35b34801561011757600080fd5b5061012061042c565b005b34801561012e57600080fd5b50610137610656565b6040516101449190610bb6565b60405180910390f35b34801561015957600080fd5b50610162610663565b60405161016f9190610be0565b60405180910390f35b34801561018457600080fd5b5061018d61068b565b60405161019a9190610c5a565b60405180910390f35b6101ab610201565b005b3480156101b957600080fd5b506101c26106b5565b005b3480156101d057600080fd5b506101eb60048036038101906101e69190610ca1565b610943565b6040516101f89190610be0565b60405180910390f35b6802b5e3af16b1880000610240600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461098a90919063ffffffff16565b1015610281576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161027890610d2b565b60405180910390fd5b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102d09190610d7a565b925050819055506000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b1580156103ef57600080fd5b505afa158015610403573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104279190610de5565b905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104b1576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60008054905081101561055c5760008082815481106104d6576104d5610e12565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061055490610e41565b9150506104b4565b50600067ffffffffffffffff81111561057857610577610e8a565b5b6040519080825280602002602001820160405280156105a65781602001602082028036833780820191505090505b50600090805190602001906105bc929190610a66565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161060390610eea565b60006040518083038185875af1925050503d8060008114610640576040519150601f19603f3d011682016040523d82523d6000602084013e610645565b606091505b505090508061065357600080fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461073a576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808054806020026020016040519081016040528092919081815260200182805480156107bd57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610773575b5050505050905060005b81518110156108485760008282815181106107e5576107e4610e12565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061084090610e41565b9150506107c7565b50600067ffffffffffffffff81111561086457610863610e8a565b5b6040519080825280602002602001820160405280156108925781602001602082028036833780820191505090505b50600090805190602001906108a8929190610a66565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516108ef90610eea565b60006040518083038185875af1925050503d806000811461092c576040519150601f19603f3d011682016040523d82523d6000602084013e610931565b606091505b505090508061093f57600080fd5b5050565b600080828154811061095857610957610e12565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600080610996836109c6565b90506000670de0b6b3a764000085836109af9190610eff565b6109b99190610f88565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610a0f57600080fd5b505afa158015610a23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a479190611031565b5050509150506402540be40081610a5e91906110ac565b915050919050565b828054828255906000526020600020908101928215610adf579160200282015b82811115610ade5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610a86565b5b509050610aec9190610af0565b5090565b5b80821115610b09576000816000905550600101610af1565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b3d82610b12565b9050919050565b610b4d81610b32565b8114610b5857600080fd5b50565b600081359050610b6a81610b44565b92915050565b600060208284031215610b8657610b85610b0d565b5b6000610b9484828501610b5b565b91505092915050565b6000819050919050565b610bb081610b9d565b82525050565b6000602082019050610bcb6000830184610ba7565b92915050565b610bda81610b32565b82525050565b6000602082019050610bf56000830184610bd1565b92915050565b6000819050919050565b6000610c20610c1b610c1684610b12565b610bfb565b610b12565b9050919050565b6000610c3282610c05565b9050919050565b6000610c4482610c27565b9050919050565b610c5481610c39565b82525050565b6000602082019050610c6f6000830184610c4b565b92915050565b610c7e81610b9d565b8114610c8957600080fd5b50565b600081359050610c9b81610c75565b92915050565b600060208284031215610cb757610cb6610b0d565b5b6000610cc584828501610c8c565b91505092915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610d15601b83610cce565b9150610d2082610cdf565b602082019050919050565b60006020820190508181036000830152610d4481610d08565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d8582610b9d565b9150610d9083610b9d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610dc557610dc4610d4b565b5b828201905092915050565b600081519050610ddf81610c75565b92915050565b600060208284031215610dfb57610dfa610b0d565b5b6000610e0984828501610dd0565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610e4c82610b9d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610e7f57610e7e610d4b565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610ed4600083610eb9565b9150610edf82610ec4565b600082019050919050565b6000610ef582610ec7565b9150819050919050565b6000610f0a82610b9d565b9150610f1583610b9d565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610f4e57610f4d610d4b565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610f9382610b9d565b9150610f9e83610b9d565b925082610fae57610fad610f59565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610fd881610fb9565b8114610fe357600080fd5b50565b600081519050610ff581610fcf565b92915050565b6000819050919050565b61100e81610ffb565b811461101957600080fd5b50565b60008151905061102b81611005565b92915050565b600080600080600060a0868803121561104d5761104c610b0d565b5b600061105b88828901610fe6565b955050602061106c8882890161101c565b945050604061107d88828901610dd0565b935050606061108e88828901610dd0565b925050608061109f88828901610fe6565b9150509295509295909350565b60006110b782610ffb565b91506110c283610ffb565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561110157611100610d4b565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561113e5761113d610d4b565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561117b5761117a610d4b565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156111b8576111b7610d4b565b5b82820290509291505056fea2646970667358221220d9e660d995a744b70effad1cbed4c1b11a8bc3f41d6b54e7a6b92ad5fc6200ba64736f6c63430008080033",
  "devdoc": {
    "author": "Patrick Collins",
    "details": "This implements price feeds as our library",
    "kind": "dev",
    "methods": {
      "getAddressToAmountFunded(address)": {
        "params": {
          "fundingAddress": "the address of the funder"
        },
        "returns": {
          "_0": "the amount funded"
        }
      }
    },
    "title": "A sample Funding Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fund()": {
        "notice": "This function is for funding the contract based on the ETH/USD price"
      },
      "getAddressToAmountFunded(address)": {
        "notice": "Gets the amount that an address has funded"
      }
    },
    "notice": "This contract is for creating a sample funding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 67,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 71,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 74,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}